# -*- coding: utf-8 -*-
"""CIFAR-10_ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lQ6D0JtD6bFOz3GHLZnYD7lSXaMBZgS1
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix
from tensorflow.keras.layers import BatchNormalization

# CIFAR-10 데이터셋 불러오기
(X_train, y_train), (X_test, y_test) = tf.keras.datasets.cifar10.load_data()

# 데이터 전처리 (0~1 사이 값으로 스케일링)
X_train = X_train / 255.0
X_test = X_test / 255.0

# 클래스 이름 정의
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 
               'dog', 'frog', 'horse', 'ship', 'truck']

# 인공신경망 모델 생성 (드롭아웃 추가)
model = tf.keras.models.Sequential([
    tf.keras.layers.Flatten(input_shape=(32, 32, 3)),
    tf.keras.layers.Dense(256, activation='relu'),
    BatchNormalization(),
    tf.keras.layers.Dropout(0.5),  # 드롭아웃 추가
    tf.keras.layers.Dense(128, activation='relu'),
    BatchNormalization(),  
    tf.keras.layers.Dense(64, activation='relu'),
    BatchNormalization(),  
    tf.keras.layers.Dense(10, activation='softmax')
])

# 모델 컴파일
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# 모델 학습
history = model.fit(X_train, tf.keras.utils.to_categorical(y_train), 
                    epochs=100, 
                    batch_size=400, 
                    validation_split=0.2)

# 학습 결과 시각화
plt.figure(figsize=(10, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='train_loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='train_acc')
plt.plot(history.history['val_accuracy'], label='val_acc')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# 모델 평가
test_loss, test_acc = model.evaluate(X_test, tf.keras.utils.to_categorical(y_test))
print('Test loss:', test_loss)
print('Test accuracy:', test_acc)

# 예측 결과 시각화 (confusion matrix)
y_pred = model.predict(X_test)
cm = confusion_matrix(y_test, y_pred.argmax(axis=1))
sns.heatmap(cm, annot=True, cmap='Blues', xticklabels=class_names, yticklabels=class_names)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.show()